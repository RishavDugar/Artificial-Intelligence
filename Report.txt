''''''''''Logic''''''''''

For every electric vehicle we can get several routes and various battery charging locations and amounts. Tranversing through the state space is cumbersome and hence some assumptions were made :

1) Battery can be charged in discrete amounts only i.e. only integer percentages are allowed. This will not affect optimality largely because the difference in the batteryh charging values will always lie between [0,1) .

2) maxDepth has been initialised which is for the maximum possible routes we are going to consider for each electric vehicle. If all paths are considered it increases the computational time. Hence maxDepth can be initialised to any number (2,3,4,...) . If maxDepth is taken very high, complete combinations of paths will be considered.

**For heuristic choose maxDepth = 1 and for optimal maxDepth a large number


Steps :

1) Generate all possible routes and corresponding distances for every electric vehicle.

2) Sort the routes on basis of distances and choose the best maxDepth number of routes.

3) Generate a battery charging matrix. A recursional function time_calculator() has been used for this. Several logical conditions like range of charging possible, total charge needed etc. has been considered.

4) With each matrix generated the final_time() is called which on the basis of charging times, priority, end times assigns the correct operations.

5) The max(Time of electric vehicle) is compared with globally maintained variables. 

